exports.basicStartupDetails = async (req, res) => {
  try {
    const userId=req.user_id;
    const profile=await Profile.findOne({user_id:userId});
    if(!profile){
      return res.status(500).json({message:"First create your profile"});
    }
    const { 
      startupName, tagline, description, stage, category, blockchainPlatforms, 
     socialLinks,pitchDemoVideo,whitePaperText,pitchDeck_Url,whitepaperUrl,pitchDeckText
    } = req.body;

    const file=req.files;

    const socialLinksParsed = socialLinks ? JSON.parse(socialLinks) : {};

    if (!startupName || !description || !stage || !category || !blockchainPlatforms  || !file) {
      return res.status(400).json({ message: "Required fields are missing" });
    }

    // Handle file uploads
    const containerName = process.env.AZURE_CONTAINER_NAME; // The name of the Azure Blob container where you want to store the files

    // Upload the files to Azure and get URLs using your uploadFileToAzure function
    const whitePaperUrl = file.whitePaper && file.whitePaper.length > 0
      ? await uploadFileToAzure(containerName, file.whitePaper[0].buffer, file.whitePaper[0].originalname)
      : null;
    
    const pitchDeckUrl= file.pitchDeck && file.pitchDeck.length > 0
    ? await uploadFileToAzure(containerName, file.pitchDeck[0].buffer, file.pitchDeck[0].originalname)
    : null;

    const pitchDemoVideoUrl= file.pitchDemoVideo && file.pitchDemoVideo.length > 0
    ? await uploadFileToAzure(containerName, file.pitchDemoVideo[0].buffer, file.pitchDemoVideo[0].originalname)
    : null;

    const startupLogoUrl= file.startupLogo && file.startupLogo.length > 0
    ? await uploadFileToAzure(containerName, file.startupLogo[0].buffer, file.startupLogo[0].originalname)
    : null;

    const bannerImageUrl=file.bannerImage && file.bannerImage.length > 0
    ? await uploadFileToAzure(containerName, file.bannerImage[0].buffer, file.bannerImage[0].originalname)
    : null;


    let startup = await Startup.findOne({ user_id: userId });
    if (startup) {
        // Update existing startup
        startup.startupName = startupName;
        startup.tagline = tagline;
        startup.description = description;
        startup.stage = stage;
        startup.category = category;
        startup.blockchainPlatforms = blockchainPlatforms,
        startup.socialLinks = socialLinksParsed;
        // startup.whitepaper = { file_name: file.whitePaper?.[0]?.originalname || startup.whitepaper?.file_name, file_url: whitePaperUrl };
        startup.whitepaperText=whitePaperText;
        startup.whitepaper_Url=whitepaperUrl;
        startup.startupLogo = { file_name: file.startupLogo?.[0]?.originalname || startup.startupLogo?.file_name, file_url: startupLogoUrl };
        startup.bannerImage = { file_name: file.bannerImage?.[0]?.originalname || startup.bannerImage?.file_name, file_url: bannerImageUrl };
        startup.pitchDeck = { file_name: file.pitchDeck?.[0]?.originalname || startup.pitchDeck?.file_name, file_url: pitchDeckUrl };
        startup.pitchDeckText=pitchDeckText;
        startup.pitchDeck_Url=pitchDeck_Url;
        startup.pitchDemoVideo_Url = pitchDemoVideo;
    
        await startup.save({validateBeforeSave:false});
        return res.status(200).json({ message: "Startup details updated successfully", startup });
      } else {
        // Create new startup
        startup = new Startup({
          user_id: userId,
          startupName,
          tagline,
          description,
          stage,
          category,
          blockchainPlatforms: blockchainPlatforms,
          socialLinks: socialLinksParsed,
          // whitepaper: { file_name: file.whitePaper?.[0]?.originalname, file_url: whitePaperUrl },
          whitepaperText:whitePaperText,
          whitepaper_Url:whitepaperUrl,
          startupLogo: { file_name: file.startupLogo?.[0]?.originalname, file_url: startupLogoUrl },
          bannerImage: { file_name: file.bannerImage?.[0]?.originalname, file_url: bannerImageUrl },
          pitchDeck: { file_name: file.pitchDeck?.[0]?.originalname, file_url: pitchDeckUrl },
          pitchDeckText:pitchDeckText,
          pitchDeck_Url:pitchDeck_Url,
          pitchDemoVideo_Url:pitchDemoVideo
        });
  
        await startup.save({validateBeforeSave:false});
        return res.status(200).json({ message: "Startup step 1 saved successfully", startup });
      }

  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};